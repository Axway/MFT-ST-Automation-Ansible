- name: Install Core License
  ansible.builtin.copy:
    src: "{{ CORE_LICENSE }}"
    dest: "{{ FILEDRIVEHOME }}/conf/filedrive.license"
    owner: "{{ ST_USER }}"
    group: "{{ ST_GROUP }}"
    mode: '0755'
  tags:
    - before_exchange
- name: Install Features License
  ansible.builtin.copy:
    src: "{{ FEATURES_LICENSE }}"
    dest: "{{ FILEDRIVEHOME }}/conf/st.license"
    owner: "{{ ST_USER }}"
    group: "{{ ST_GROUP }}"
    mode: '0755'
  tags:
    - before_exchange

- name: Assign memory to the admin service to make configuration easier
  become: true
  become_user: "{{ ST_USER }}"
  ansible.builtin.lineinfile:
    path: "{{ FILEDRIVEHOME }}/conf/STStartScriptsConfig"
    regexp: '^ADMIN_JAVA_MEM_MAX='
    line: ADMIN_JAVA_MEM_MAX=2048M
  tags:
    - before_exchange

- name: Assign min memory to the admin service to make configuration easier
  become: true
  become_user: "{{ ST_USER }}"
  ansible.builtin.lineinfile:
    path: "{{ FILEDRIVEHOME }}/conf/STStartScriptsConfig"
    regexp: '^ADMIN_JAVA_MEM_MIN='
    line: ADMIN_JAVA_MEM_MIN=512M
  tags:
    - before_exchange

- name: Stop admin
  become: true
  become_user: "{{ ST_USER }}"
  ansible.builtin.command: "sh {{ FILEDRIVEHOME }}/bin/stop_admin"
  args:
    chdir: "{{ FILEDRIVEHOME }}/bin/"
  tags:
    - before_exchange

- name: Wait for the admin port of any IP to close active connections
  ansible.builtin.wait_for:
    host: 0.0.0.0
    port: "{{ SSL_ADMIN_PORT }}"
    state: drained
  tags:
    - before_exchange

- name: Start admin
  become: true
  become_user: "{{ ST_USER }}"
  ansible.builtin.shell:
    cmd: "{{ FILEDRIVEHOME }}/bin/start_admin"
    executable: /usr/bin/bash
  tags:
    - before_exchange
  changed_when: true

- name: Wait for admin port to become open on the host, don't start checking for 10 seconds
  ansible.builtin.wait_for:
    host: 0.0.0.0
    port: "{{ SSL_ADMIN_PORT }}"
    delay: 10
    timeout: 600
  tags:
    - before_exchange
# Pause few seconds for logs to roll with initialization of Tomcat
- name: Pause for 30 seconds to give tomcat a chance to start
  ansible.builtin.pause:
    seconds: 30

# Tail the log 15 times with 20 second interval looking for Server startup (300 secs)
- name: Tail catalina.out to ensure server startup
  ansible.builtin.command: "tail -n 75 {{ FILEDRIVEHOME }}/tomcat/admin/logs/catalina.out"
  register: catalina_tail
  until: catalina_tail.stdout is search('Server startup')
  retries: 15
  delay: 20
  changed_when: "'Server startup' in catalina_tail.stdout"
  ignore_errors: true

- name: Test admin:admin login
  ansible.builtin.uri:
    url: https://{{ hostvars[inventory_hostname]['ansible_fqdn'] }}:{{ SSL_ADMIN_PORT }}/api/v2.0/myself
    method: POST
    validate_certs: false
    user: admin
    password: admin
    status_code: [200, 202, 401, 403]
    force_basic_auth: true
    body_format: json
    headers:
      Content-Type: application/json
      Accept: application/json
  register: _setup_login_output
  when:
    - inventory_hostname == "edge_primary" or inventory_hostname == "core_primary"
  tags:
    - rest_api


- name: Update the admin password from contents of local file
  vars:
    admin_passwd_patch: "{{ lookup('template', 'passwordChange.json.j2') }}"
  ansible.builtin.uri:
    url: https://{{ hostvars[inventory_hostname]['ansible_fqdn'] }}:{{ SSL_ADMIN_PORT }}/api/v2.0/myself
    method: PATCH
    validate_certs: false
    return_content: true
    status_code: 204
    timeout: 60
    body_format: json
    body: "{{ admin_passwd_patch }}"
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ _setup_login_output.cookies_string }}"
      Referer: Ansible
      csrftoken: "{{ _setup_login_output.csrftoken }}"
  when:
    - inventory_hostname == "edge_primary" or inventory_hostname == "core_primary"
    - "'Logged' in _setup_login_output.json.message"
  tags:
    - rest_api

- name: Log in with the new credentials and store cookies and token
  ansible.builtin.uri:
    url: https://{{ hostvars[inventory_hostname]['ansible_fqdn'] }}:{{ SSL_ADMIN_PORT }}/api/v2.0/myself
    method: POST
    validate_certs: false
    user: admin
    password: "{{ TMP_ADMIN_PWD }}"
    status_code: [200, 201, 202]
    force_basic_auth: true
    body_format: json
    headers:
      Content-Type: application/json
      Accept: application/json
  register: login
  tags:
    - rest_api
- name: Generate certificates
  import_tasks: configure_certificates.yml
- import_tasks: streaming_tasks.yml
- import_tasks: enable_services.yml
- import_tasks: create_service_files.yml
- import_tasks: apply_custom_config.yml


- name: Restart everything
  ansible.builtin.debug:
    msg: "All services going down for a restart on {{ inventory_hostname }}"
  notify:
    - Stop all
    - Wait for stop
    - TM pid destroyed
    - DB pid destroyed
    - ADMIN pid destroyed
    - SSHD pid destroyed
    - AS2 pid destroyed
    - FTPD pid destroyed
    - Reboot
    - Wait for start
  changed_when: true
  tags:
    - restart
    - reboot
    - service_files
